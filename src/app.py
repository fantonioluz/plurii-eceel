import streamlit as st
from db_utils import load_data_from_db
from analysis_utils import clean_balance_column, calculate_salary_expenses, calculate_monthly_profit, prepare_account_data, prepare_credit_debit_data, prepare_profit_data, prepare_yearly_account_data, prepare_yearly_subaccount_data
from visualization_utils import create_account_chart, create_credit_debit_chart,  create_salary_chart, create_profit_chart, create_yearly_account_chart, create_yearly_subaccount_chart
from streamlit_option_menu import option_menu

# Inicializar o estado da p√°gina
if "selected_page" not in st.session_state:
    st.session_state.selected_page = "In√≠cio"

# Sidebar com menu
with st.sidebar:
    selected = option_menu(
        "FinancePro",
        ["In√≠cio", "Dashboard Geral", "An√°lise por Banco", "Hist√≥rico de Transa√ß√µes"],
        icons=['house', 'bar-chart-line', 'graph-up', 'clock-history'],
        menu_icon="cast",
        default_index=["In√≠cio", "Dashboard Geral", "An√°lise por Banco", "Hist√≥rico de Transa√ß√µes"].index(st.session_state.selected_page)
    )

# Atualizar a p√°gina com base no menu selecionado
if selected != st.session_state.selected_page:
    st.session_state.selected_page = selected

# P√°gina "In√≠cio"
if st.session_state.selected_page == "In√≠cio":
    # Cabe√ßalho principal
    st.title("ECEEL - TEC")
    st.markdown("### Ol√°, M¬™ Helena!")
    st.write("Seja bem-vinda √† sua √°rea exclusiva de organiza√ß√£o financeira, explore e impulsione seu neg√≥cio.")
    
    # Imagem da usu√°ria
    col1, col2 = st.columns([1, 3])
    with col1:
        st.image("src/images/Mask group.png", width=150, caption="Gestora")  # Ajuste o caminho, se necess√°rio
    with col2:
        st.write("### M¬™ Helena de Souza")
        st.write("**Status:** Nenhuma notifica√ß√£o no momento")
    
    # Notifica√ß√µes
    st.info("üîî N√£o h√° nenhuma notifica√ß√£o no momento.")
    
    # Bot√µes de navega√ß√£o
    st.write("### A√ß√µes r√°pidas")
    col1, col2 = st.columns(2)
    with col1:
        if st.button("Ir ao Dashboard"):
            st.session_state.selected_page = "Dashboard Geral"
            st.query_params.update(page="Dashboard Geral")  # Redirecionar
    with col2:
        if st.button("Hist√≥rico de Transa√ß√µes"):
            st.session_state.selected_page = "Hist√≥rico de Transa√ß√µes"
            st.query_params.update(page="Hist√≥rico de Transa√ß√µes")  # Redirecionar

# P√°gina "Dashboard Geral"
if st.session_state.selected_page == "Dashboard Geral":
    st.title("Dashboard de Desempenho Financeiro")

    # Carregar dados do banco
    data = load_data_from_db()

    # Limpar coluna 'saldo'
    data = clean_balance_column(data)

    # Gr√°fico de gastos mensais com funcion√°rios
    st.subheader("Gastos Mensais com Funcion√°rios")
    salary_expenses = calculate_salary_expenses(data)
    salary_chart = create_salary_chart(salary_expenses)
    st.altair_chart(salary_chart)

    # Gr√°fico de lucro mensal
    st.subheader("Lucro Mensal")
    monthly_profit = calculate_monthly_profit(data)
    profit_chart = create_profit_chart(monthly_profit)
    st.altair_chart(profit_chart)
    
    # Preparar dados para entradas e sa√≠das mensais
    credit_debit_data = prepare_credit_debit_data(data)

    # Gr√°fico de entradas e sa√≠das mensais
    st.subheader("Entradas e Sa√≠das Mensais (Cr√©dito e D√©bito)")
    credit_debit_chart = create_credit_debit_chart(credit_debit_data)
    st.altair_chart(credit_debit_chart)
    
    # Exibir tabela de dados de entradas e sa√≠das mensais
    st.write("Dados de Entradas e Sa√≠das Mensais:")
    st.write(credit_debit_data)

    # Gr√°fico de total de d√©bito e cr√©dito por ano e conta
    st.subheader("Total de D√©bito e Cr√©dito por Ano e Conta")
    yearly_account_data = prepare_yearly_account_data(data)
    yearly_account_chart = create_yearly_account_chart(yearly_account_data)
    st.altair_chart(yearly_account_chart)

    # Gr√°fico de total de d√©bito e cr√©dito por ano e subconta para 'Despesa com pessoal'
    st.subheader("Total de D√©bito e Cr√©dito por Ano e Subconta (Despesa com pessoal)")
    yearly_subaccount_data_pessoal = prepare_yearly_subaccount_data(data, 'Despesa com pessoal')
    yearly_subaccount_chart_pessoal = create_yearly_subaccount_chart(yearly_subaccount_data_pessoal, 'Despesa com pessoal')
    st.altair_chart(yearly_subaccount_chart_pessoal)

    # Gr√°fico de total de d√©bito e cr√©dito por ano e subconta para 'Despesas administrativas'
    st.subheader("Total de D√©bito e Cr√©dito por Ano e Subconta (Despesas administrativas)")
    yearly_subaccount_data_administrativas = prepare_yearly_subaccount_data(data, 'Despesas administrativas')
    yearly_subaccount_chart_administrativas = create_yearly_subaccount_chart(yearly_subaccount_data_administrativas, 'Despesas administrativas')
    st.altair_chart(yearly_subaccount_chart_administrativas)
 
# P√°gina "An√°lise por Banco"
if st.session_state.selected_page == "An√°lise por Banco":
    st.title("An√°lise por Banco")
    st.write("Aqui ser√° o conte√∫do da An√°lise por Banco.")

# P√°gina "Hist√≥rico de Transa√ß√µes"
if st.session_state.selected_page == "Hist√≥rico de Transa√ß√µes":
    st.title("Hist√≥rico de Transa√ß√µes")
    st.write("Aqui ser√° o hist√≥rico de transa√ß√µes.")
